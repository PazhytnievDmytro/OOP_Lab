#include <iostream>

struct List {
private:
    struct Node {
        int data;
        Node* next;
        Node(int val) : data(val), next(nullptr) {}
    };
    Node* head;

public:
    List() : head(nullptr) {}
    
    ~List() {
        Node* current = head;
        while (current != nullptr) {
            Node* next = current->next;
            delete current;
            current = next;
        }
    }
    
    void add(int value) {
        Node* newNode = new Node(value);
        if (!head) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next) {
                current = current->next;
            }
            current->next = newNode;
        }
    }
    
    void remove(int value) {
        Node* current = head;
        Node* prev = nullptr;
        while (current) {
            if (current->data == value) {
                if (!prev) {
                    head = current->next;
                } else {
                    prev->next = current->next;
                }
                delete current;
                return;
            }
            prev = current;
            current = current->next;
        }
    }
    
    int get(int index) const {
        Node* current = head;
        int count = 0;
        while (current) {
            if (count == index) {
                return current->data;
            }
            current = current->next;
            count++;
        }
        throw std::out_of_range("Индекс за пределами");
    }
    
    void print() const {
        Node* current = head;
        while (current) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
};

int main() {
    List list;
    list.add(10);
    list.add(20);
    list.add(30);
    
    std::cout << "Содержимое списка ";
    list.print();
    
    list.remove(20);
    std::cout << "После удаления: ";
    list.print();
    
    try {
        std::cout << "Элемент с индексом 1 " << list.get(1) << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Ошибка: " << e.what() << std::endl;
    }
    
    return 0;
}
