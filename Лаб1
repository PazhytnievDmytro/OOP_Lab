#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

typedef struct node {
    int value;
    struct node* next;
} node_t;

typedef struct {
    node_t* head;
    size_t size;
} abstract_data_t;

static node_t* create_node(int value) {
    node_t* n = (node_t*)malloc(sizeof(node_t));
    n->value = value;
    n->next = NULL;
    return n;
}

static void push_back(abstract_data_t* list, int value) {
    node_t* n = create_node(value);
    if (!list->head) {
        list->head = n;
    } else {
        node_t* temp = list->head;
        while (temp->next) temp = temp->next;
        temp->next = n;
    }
    list->size++;
}

//Реализация интерфейса 
abstract_data_t make_empty() {
    abstract_data_t list;
    list.head = NULL;
    list.size = 0;
    return list;
}

abstract_data_t make_of_size(size_t n) {
    abstract_data_t list = make_empty();
    for (size_t i = 0; i < n; i++)
        push_back(&list, 0);
    return list;
}

abstract_data_t make_from_array(const int arr[], size_t n) {
    abstract_data_t list = make_empty();
    for (size_t i = 0; i < n; i++)
        push_back(&list, arr[i]);
    return list;
}

abstract_data_t make_copy(const abstract_data_t* src) {
    abstract_data_t copy = make_empty();
    node_t* cur = src->head;
    while (cur) {
        push_back(&copy, cur->value);
        cur = cur->next;
    }
    return copy;
}

void clear(abstract_data_t* list) {
    node_t* cur = list->head;
    while (cur) {
        node_t* next = cur->next;
        free(cur);
        cur = next;
    }
    list->head = NULL;
    list->size = 0;
}

int at(const abstract_data_t* list, int index) {
    if (list->size == 0) return 0;
    if (index < 0) index = (int)list->size + index;
    if (index < 0) index = 0;
    if ((size_t)index >= list->size) index = (int)list->size - 1;

    node_t* cur = list->head;
    for (int i = 0; i < index; i++)
        cur = cur->next;
    return cur->value;
}

bool is_equal(const abstract_data_t* a, const abstract_data_t* b) {
    if (a->size != b->size)
        return false;
    node_t* na = a->head;
    node_t* nb = b->head;
    while (na && nb) {
        if (na->value != nb->value)
            return false;
        na = na->next;
        nb = nb->next;
    }
    return true;
}

//Проверка
int main() {
    int array[] = {1, 4, 7, 9};
    abstract_data_t a = make_from_array(array, 4);

    assert(9 == at(&a, 3));
    assert(9 == at(&a, -1));
    assert(9 == at(&a, 13));
    assert(1 == at(&a, -13));

    abstract_data_t b = make_copy(&a);
    assert(is_equal(&a, &b));

    clear(&a);
    clear(&b);

    printf("Задание для лаборатной работы номер 1 выполнено");
    return 0;
}
